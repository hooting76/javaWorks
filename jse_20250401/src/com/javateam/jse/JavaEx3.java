package com.javateam.jse;

public class JavaEx3 {

	public static void main(String[] args) {
		// 250401 학습

		// platform : 서버 OS
		// platform-FREE

		// 운영체제(플랫폼) 의존적
		// platform-ONLY

		// 구조적 프로그래밍
		// - 서브 루틴{구조(짜임새)의 부분품}, 절차 중심 
		// - 코드(직원) 중심
		// - 코드(main) / 데이터(sub) 관계
		// - 기업의 엉크러진 부분을 정돈시킴

		// 객체(자료형)지향 프로그래밍 
		// - 기업 재산(data) 중심
		// - 데이터(main) / 코드(sub) 관계
		// - 설계(UML) 강조 -> 설계가 정교할 수록 데이터 통제하기 좋음
		// - 기업의 데이터를 우선시 하여 통제

		// (람다)함수형 프로그래밍
		// - 기호식 / 기존보다 코드량 축소
		
		// 자동 메모리 관리(garbage collection)
		// - 기본적으로 프로그램 코드는 메모리에 올라감
		// - 일반적인 변수(건물, 집) => 임대 => 사용기간 만료 => 반환(if 미반환 => 손해)	
		// ---------------------------------------
		// - ex) C언어: 메모리(건물) 사용후 자진 반납 // if 자진 반납이 안된다면 => 메모리 공간 활용이 어려움
		// - 이 현상이 반복되어 누적 되면, 메모리 부족 현상 발생(Leak(age)) ==> 교착상태(deadlock)
		// - 이로 인해 자동 반납 아이디어 도입 => 다른 건물(변수) 활용 가능  
		// ---------------------------------------
		// 자동(JVM) garbage collection : 안쓰는 공간(garbage)을 수거  
		
		// 멀티-스레드(thread) // 다중작업
		// 일 처리 => 중앙집중처리(mainframe-host)
		// 네트워크 => (다수 컴퓨터) 분산처리
		// 일 처리 -> 단독 처리 -> 문제점 발생!
		// 일을 나누어서 처리(일 처리 단위 : 스레드) // 조금씩 처리하자는 개념
		// ex) 비빔밥 => 친구들끼리 숫가락들(멀티-스레드)
		
		// 동적 로딩(Dynamic Loading)
		// - 필요한 시점에 동적으로 로딩하여 자원을 효율적으로 사용
		
		// JRE(자바 구동 환경) 안에 JVM(자바 가상 머신) 이 포함
		// windows shell 명령어 익혀두기
		// javac는 JVM에서 돌아갈 수 있도록 자바파일을 컴파일을 해줌
		
		// api(application programming interface) 
		// - 구성요소 : 서브루틴 ,메소드 , 요청, 통신 엔드포인트		
		// - 특징: 소프트웨어나 애플리케이션이 서로 상호작용할 수 있도록 하는 인터페이스
		// - 특정 기능을 사용할 수 있는 규칙, 명세, 함수의 집합
		// 라이브러리(library)
		// - 특징: 라이브러리는 자주 사용되는 코드들의 집합
		// - 특정 기능을 수행하기 위해 필요한 클래스나 메소드들을 포함하고 있는 파일이나 모듈
		// - 프로그램에서 직접적으로 사용할 수 있는 코드들이 모여 있다.
		
		// **api 와 라이브러리 차이점 인지하기!
		
		// 자바 내에서 모듈의 개념은 자바9 버전부터 생겼다.
		// 모듈 > 패키지 포함 관계
		// 키보드 입력 만이 표준 입력
		// 콘솔로 결과가 나오는 창이 표준 출력
		
		System.out.println("자바");
		// -----------------------------		
		// 해당 코드라인에 커서를 올리면 간략한 api 설명칸이 생성
		// f2를 누르면 고정형으로 바뀌며, 
		// 좌측하단 아이콘(open declaration)을 누르면 해당 api 의 소스코드(java doc)를 확인할 수 있다. 
		// ㄴ short cut : 커서를 올린 후 ctrl + 좌클릭	
		// ㄴ *원래는 볼 수 없는 문서 이지만, 이클립스가 read only 로 보여주는 것.
		// open attached Javadoc in a browser 아이콘 : 온라인 api 문서를 브라우저로 열람하게 하는 기능
		// @ 아이콘 : 이클립스 Javadoc panel 로 자바api 문서 열람하게 하는 기능
		// -----------------------------
		
		// /** <- 문서화 하겠다는 주석 기호
		
		// 자바 파일 구동 과정
		// (소스)컴파일 + (라이브러리)링크 = 빌딩(build-ing) // 프로그램을 만드는(짓는) 작업
		// eclipse RUN => 빌딩(compile, link) + JRE run // 병렬 진행
		// 컴파일링은 JDK 에서 불러옴으로 실행
		
		// -----------------------------		
		// 자바파일 생성 ----(javac.exe / 컴파일)----> 클래스 파일 생성 -------(java.exe / 실 행)-------> 출력
		// 클래스 파일(.class) : 바이트코드
		// java.exe : 실행기,인터프리터 // 실질적인 구동은 JVM에서 진행
		// 출력
		// -----------------------------
		
		// 영단어
		// overview : 개요
		// nested : 보금자리 / 둥지
		// perspective : 관점 / 작업 테이블
		// deprecated[deprəkeɪt] : 비추천하다, 반대하다 / 자바api 문서에서 출시 이후에 발견된 문제 코드들을 모아놓은 카테고리
		// ㄴ 자바api 문서에서는 상속성을 만족시키기 위해 남겨두는 것.
		// 그 외, 공식문서 내의 영단어들을 조금씩 익혀두기
		
		// **-----------------2강 변수------------------**
		
		// 변수 선언(정의)(define / declare)
		// 변수(field) : 땅(필드)
		// - 자료를 표현하는 한가지 방법 / 메모리(RAM) 위에 특정 공간을 점유
		// ex)--시 --구 --로 NN SUB
		// num1 : sub 에 들어가는 이름과 같은 역할
		// 주소 : 32비트(8바이트) 체제(16진수로 표현)
		
		// int : 32비트(8바이트) 정수 자료형(data-type) // 2^8
		// int num1; 은 num1이 null(비어있는) 상태
		// int num1 = 1.2; (x) 정수 <- 실수 
		// data-type을 맞춰서 값이 들어갈 수 있도록 해야 한다.
		
		int num1 = 1;  // 1: 초기값(initial value)
		// 여기 이 자리에 num = 2; 로 입력하면 num1 은 2로 출력된다.
		System.out.println(num1);
		
	}

}
